parameters:
  - description: Application name
    name: APPLICATION_NAME
    required: false
    value: registry-cache
  - description: Application version (tag)
    name: APPLICATION_VERSION
    required: false
    value: latest
  - description: Namespace/Project
    name: NAMESPACE
    required: false
    value: registry-cache
  - description: Size of cache in MB
    name: CACHE_SIZE_MB
    required: false
    value: "10000"
  - description: Target registry IP
    name: TARGET_REGISTRY_IP
    required: false
    value: docker.io
  - description: Target registry port
    name: TARGET_REGISTRY_PORT
    required: false
    value: "443"
  - description: Cache home directory
    name: HOME
    required: false
    value: /cache/cc
  - description: Source location
    name: SOURCE_URI
    required: false
    value: https://github.com/gibbsoft/docker-registry-cache.git
  - description: Source git ref
    name: SOURCE_REF
    required: false
    value: openshift

apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${APPLICATION_NAME}
message: "Registry cache runs on port 3128"
objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: ${APPLICATION_NAME}
      namespace: ${NAMESPACE}
      labels:
        account: ${APPLICATION_NAME}

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}
      namespace: ${NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
        service: ${APPLICATION_NAME}
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: ${APPLICATION_NAME}
    spec:
      ports:
        - name: squid
          protocol: TCP
          port: 3128
      type: ClusterIP
      selector:
        app: ${APPLICATION_NAME}

  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      name: ${APPLICATION_NAME}
      namespace: ${NAMESPACE}
    spec:
      lookupPolicy:
        local: false

  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      name: alpine
    spec:
      lookupPolicy:
        local: false
      tags:
        - from:
            kind: DockerImage
            name: docker.io/library/alpine:3.8
          referencePolicy:
            type: Local
          name: "3.8"
          importPolicy: {}

  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        app: ${APPLICATION_NAME}
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:${APPLICATION_VERSION}"
      postCommit: {}
      resources: {}
      source:
        git:
          uri: ${SOURCE_URI}
          ref: ${SOURCE_REF}
        type: Git
      strategy:
        DockerBuildStrategy:
          dockerfilePath: Dockerfile
          from:
            kind: ImageStreamTag
            name: alpine:3.8
            namespace: ${NAMESPACE}
        type: Docker
      triggers:
        - type: ImageChange
        - type: ConfigChange

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: ${APPLICATION_NAME}
      namespace: ${NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: ${APPLICATION_NAME}
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
        spec:
          serviceAccountName: ${APPLICATION_NAME}
          containers:
            - name: ${APPLICATION_NAME}
              image: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/${APPLICATION_NAME}:${APPLICATION_VERSION}
              imagePullPolicy: Always
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              ports:
                - containerPort: 5000
                  protocol: TCP
              volumeMounts:
                - name: ${APPLICATION_NAME}
                  mountPath: /etc/${APPLICATION_NAME}
                  readOnly: true
              env:
                - name: CACHE_SIZE_MB
                  value: ${CACHE_SIZE_MB}
                - name: TARGET_REGISTRY_IP
                  value: ${TARGET_REGISTRY_IP}
                - name: TARGET_REGISTRY_PORT
                  value: ${TARGET_REGISTRY_PORT}
                - name: HOME
                  value: ${HOME}
                - name: APPLICATION_NAME
                  value: ${APPLICATION_NAME}
              readinessProbe:
                tcpSocket:
                  port: 3128
                initialDelaySeconds: 3
                timeoutSeconds: 3
          volumes:
            - name: ${APPLICATION_NAME}
              secret:
                secretName: ${APPLICATION_NAME}
          resources:
            requests:
              memory: 64M
              cpu: 100m
            limits:
              memory: 256M
              cpu: 256m
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
